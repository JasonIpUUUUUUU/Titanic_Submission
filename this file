{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport random\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-08T16:41:31.522898Z","iopub.execute_input":"2024-05-08T16:41:31.523279Z","iopub.status.idle":"2024-05-08T16:41:34.219752Z","shell.execute_reply.started":"2024-05-08T16:41:31.523248Z","shell.execute_reply":"2024-05-08T16:41:34.218655Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trainData = '/kaggle/input/titanic/train.csv'\ntestData = '/kaggle/input/titanic/test.csv'\n\ndata_train = pd.read_csv(trainData)\n\ndata_test = pd.read_csv(testData)\n\ndata_test.describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-08T17:12:54.468115Z","iopub.execute_input":"2024-05-08T17:12:54.468594Z","iopub.status.idle":"2024-05-08T17:12:54.511970Z","shell.execute_reply.started":"2024-05-08T17:12:54.468560Z","shell.execute_reply":"2024-05-08T17:12:54.509503Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nan_columns = data_test.isna().any()\n\nprint(nan_columns)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T17:07:18.988217Z","iopub.execute_input":"2024-05-08T17:07:18.988620Z","iopub.status.idle":"2024-05-08T17:07:18.996670Z","shell.execute_reply.started":"2024-05-08T17:07:18.988590Z","shell.execute_reply":"2024-05-08T17:07:18.995553Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features = ['Pclass', 'Sex', 'Age', 'Fare', 'Cabin', 'Embarked']\n\nx_train = data_train[features].copy()\nx_test = data_test[features].copy()\n\ny_train = data_train['Survived']\n\nx_train['Sex'] = x_train['Sex'].replace({'male': 0, 'female': 1})\nx_test['Sex'] = x_test['Sex'].replace({'male': 0, 'female': 1})\n\nx_train['Embarked'] = x_train['Embarked'].replace({'S': 1, 'C': 2, 'Q': 3})\nx_test['Embarked'] = x_test['Embarked'].replace({'S': 1, 'C': 2, 'Q': 3})","metadata":{"execution":{"iopub.status.busy":"2024-05-08T17:14:47.770195Z","iopub.execute_input":"2024-05-08T17:14:47.770610Z","iopub.status.idle":"2024-05-08T17:14:47.795370Z","shell.execute_reply.started":"2024-05-08T17:14:47.770581Z","shell.execute_reply":"2024-05-08T17:14:47.794252Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"median_age = x_train['Age'].median()\n\nx_train['Age'].fillna(median_age, inplace=True)\nx_test['Age'].fillna(median_age, inplace=True)\n\nFC_mean_fare = x_train.loc[x_train['Pclass'] == 1, 'Fare'].mean()\nSC_mean_fare = x_train.loc[x_train['Pclass'] == 2, 'Fare'].mean()\nTC_mean_fare = x_train.loc[x_train['Pclass'] == 3, 'Fare'].mean()\n\nx_train.loc[(x_train['Pclass'] == 1) & (x_train['Fare'].isna()), 'Fare'] = FC_mean_fare\nx_train.loc[(x_train['Pclass'] == 2) & (x_train['Fare'].isna()), 'Fare'] = SC_mean_fare\nx_train.loc[(x_train['Pclass'] == 3) & (x_train['Fare'].isna()), 'Fare'] = TC_mean_fare\n\nx_test.loc[(x_test['Pclass'] == 1) & (x_test['Fare'].isna()), 'Fare'] = FC_mean_fare\nx_test.loc[(x_test['Pclass'] == 2) & (x_test['Fare'].isna()), 'Fare'] = SC_mean_fare\nx_test.loc[(x_test['Pclass'] == 3) & (x_test['Fare'].isna()), 'Fare'] = TC_mean_fare\n\nx_train['Cabin'].fillna(0, inplace=True)\nx_test['Cabin'].fillna(0, inplace=True)\n\nx_train.loc[x_train['Cabin'] != 0, 'Cabin'] = 1\nx_test.loc[x_test['Cabin'] != 0, 'Cabin'] = 1\n\nx_train['Embarked'].fillna(1, inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-08T17:18:46.537583Z","iopub.execute_input":"2024-05-08T17:18:46.538048Z","iopub.status.idle":"2024-05-08T17:18:46.567262Z","shell.execute_reply.started":"2024-05-08T17:18:46.538017Z","shell.execute_reply":"2024-05-08T17:18:46.566079Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nan_columns = x_train.isna().any()\n\nprint(nan_columns)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T17:18:49.000080Z","iopub.execute_input":"2024-05-08T17:18:49.000685Z","iopub.status.idle":"2024-05-08T17:18:49.012179Z","shell.execute_reply.started":"2024-05-08T17:18:49.000644Z","shell.execute_reply":"2024-05-08T17:18:49.010044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model = RandomForestRegressor(random_state=1)\n\nmodel.fit(x_train, y_train)\n\npredictions = model.predict(x_test)\n\nsubmission_df = pd.DataFrame({'PassengerId': data_test['PassengerId'], 'Survived': predictions})\nsubmission_df.loc[submission_df['Survived'] < 0.5, 'Survived'] = 0\nsubmission_df.loc[submission_df['Survived'] >= 0.5, 'Survived'] = 1\n\nsubmission_df.to_csv('submission.csv', index=False)\n\nsubmission_df","metadata":{"execution":{"iopub.status.busy":"2024-05-08T17:21:19.437918Z","iopub.execute_input":"2024-05-08T17:21:19.438320Z","iopub.status.idle":"2024-05-08T17:21:19.758026Z","shell.execute_reply.started":"2024-05-08T17:21:19.438291Z","shell.execute_reply":"2024-05-08T17:21:19.756950Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived\n0            892       0.0\n1            893       0.0\n2            894       0.0\n3            895       1.0\n4            896       0.0\n..           ...       ...\n413         1305       0.0\n414         1306       1.0\n415         1307       0.0\n416         1308       0.0\n417         1309       0.0\n\n[418 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>1305</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1306</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>1307</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>1308</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>1309</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows Ã— 2 columns</p>\n</div>"},"metadata":{}}]}]}